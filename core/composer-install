#!/usr/bin/python

"""
Installs a package from a composer.json file from the current working directory.
"""

# Copyright 2013 Shawn Iwinski <shawn.iwinski@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

import json
import os
import sys
import argparse
import subprocess

RPM_PACKAGE_NAME    = os.environ.get('RPM_PACKAGE_NAME')
RPM_PACKAGE_VERSION = os.environ.get('RPM_PACKAGE_VERSION')
RPM_BUILD_ROOT      = os.environ.get('RPM_BUILD_ROOT')
RPM_DOC_DIR         = os.environ.get('RPM_DOC_DIR')


def parse_args():
    parser = argparse.ArgumentParser(description='Installs a package from a composer.json file from the current working directory.',
                                     epilog="""required environment variables:
  RPM_PACKAGE_NAME      RPM spec %{name} (usually set by rpmbuild)
  RPM_PACKAGE_VERSION   RPM spec %{version} (usually set by rpmbuild)
  RPM_BUILD_ROOT        RPM spec %{buildroot} (usually set by rpmbuild)
  RPM_DOC_DIR           RPM spec %{_docdir} (usually set by rpmbuild)
""", formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-v', '--verbose', '-d', '--debug',
                        action='store_true',
                        dest='verbose',
                        help='verbose/debug output',
                        default=False)
    parser.add_argument('--composer',
                        help='composer executable')
    parser.add_argument('--composer_dir',
                        help='composer directory')
    parser.add_argument('--php_dir',
                        help='PHP directory')
    parser.add_argument('--bin_dir',
                        help='bin directory')

    return parser.parse_args()


def install_vendor_symlinks(package_type, metadata, args):
    if args.verbose:
        print 'composer-install: install_vendor_symlinks: package_type = "%s"' % package_type

    if not package_type in metadata:
        return

    # Destination directory is package vendor directory
    dst_dir = RPM_BUILD_ROOT + args.composer_dir + os.sep + metadata['name'] + os.sep + 'vendor'

    for package in metadata[package_type]:
        if args.verbose:
            print 'composer-install: install_vendor_symlinks:     package = "%s"' % package

        # Skip packages like "php" and "ext-*"
        if not '/' in package:
            continue

        vendor, project = package.split('/')

        if args.verbose:
            print 'composer-install: install_vendor_symlinks:         package vendor = "%s"' % vendor
            print 'composer-install: install_vendor_symlinks:         package project = "%s"' % project

        # Package vendor directory
        vendor_dir = os.path.join(dst_dir, vendor)
        if args.verbose:
            print 'composer-install: install_vendor_symlinks:         package vendor dir = "%s"' % vendor_dir
        if not os.path.exists(vendor_dir):
            os.makedirs(vendor_dir, 0755)

        # Package project directory
        project_dir      = os.path.join(vendor_dir, project)
        project_dir_real = os.path.join(args.composer_dir, vendor, project)
        if args.verbose:
            print 'composer-install: install_vendor_symlinks:         package project dir = "%s"' % project_dir
            print 'composer-install: install_vendor_symlinks:         package project dir real= "%s"' % project_dir_real
        if not os.path.islink(project_dir):
            os.symlink(project_dir_real, project_dir)


def install_autoload(metadata, args):
    if not 'autoload' in metadata:
        return

    pass


def install_bin(metadata, args):
    if not 'bin' in metadata:
        return

    package_dir = os.path.join(args.composer_dir, metadata['name'])

    bin_dir = RPM_BUILD_ROOT + args.bin_dir
    if not os.path.exists(bin_dir):
        os.makedirs(bin_dir, 0755)

    for bin in metadata['bin']:
        bin_src     = os.path.join(package_dir, bin)
        bin_symlink = os.path.join(bin_dir, os.path.basename(bin))

        if args.verbose:
            print 'composer-install: install_bin: bin = "%s"' % bin
            print 'composer-install: install_bin:     src = "%s"' % bin_src
            print 'composer-install: install_bin:     symlink = "%s"' % bin_symlink

        os.symlink(bin_src, bin_symlink);


def install(metadata, args):
    if not 'name' in metadata:
        print >> sys.stderr, 'ERROR: Composer install: "name" not defined in composer.json'
        sys.exit(1)

    dst_dir = RPM_BUILD_ROOT + args.composer_dir + os.sep + metadata['name']
    subprocess.check_call('mkdir -p -m 0755 ' + dst_dir + '/vendor', shell=True)
    subprocess.check_call('cp -pr * ' + dst_dir, shell=True)

    install_vendor_symlinks('require',     metadata, args)
    install_vendor_symlinks('require-dev', metadata, args)
    install_vendor_symlinks('suggest',     metadata, args)

    install_autoload(metadata, args)
    install_bin(metadata, args)


def main():
    args = parse_args()

    if args.verbose:
        print 'RPM_PACKAGE_NAME = "%s"' % RPM_PACKAGE_NAME
        print 'RPM_PACKAGE_VERSION = "%s"' % RPM_PACKAGE_VERSION
        print 'RPM_BUILD_ROOT = "%s"' % RPM_BUILD_ROOT
        print 'RPM_DOC_DIR = "%s"' % RPM_DOC_DIR
        print args

    if not os.path.exists('composer.json'):
        print >> sys.stderr, 'ERROR: Composer install: composer.json not found'
        sys.exit(1)

    metadata = json.load(open('composer.json'))

    install(metadata, args)


if __name__ == '__main__':
    main()
