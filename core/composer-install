#!/usr/bin/python

"""
Installs a package from a composer.json file from the current working directory.
"""

# Copyright 2013 Shawn Iwinski <shawn.iwinski@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

import json
import os
import sys
import argparse
import subprocess



class ComposerInstall:
    RPM_PACKAGE_NAME     = os.environ.get('RPM_PACKAGE_NAME')
    RPM_PACKAGE_VERSION  = os.environ.get('RPM_PACKAGE_VERSION')
    RPM_BUILD_ROOT       = os.environ.get('RPM_BUILD_ROOT')
    RPM_DOC_DIR          = os.environ.get('RPM_DOC_DIR')

    DEFAULT_COMPOSER_DIR = '/usr/share/composer'

    DEFAULT_VENDOR_DIR   = 'vendor'

    DEFAULT_BIN_DIR      = 'vendor/bin'
    DEFAULT_SYS_BIN_DIR  = '/usr/bin'


    def __init__(self):
        self.args = self.parseArgs()

        if self.args.verbose:
            print 'RPM_PACKAGE_NAME = "%s"' % self.RPM_PACKAGE_NAME
            print 'RPM_PACKAGE_VERSION = "%s"' % self.RPM_PACKAGE_VERSION
            print 'RPM_BUILD_ROOT = "%s"' % self.RPM_BUILD_ROOT
            print 'RPM_DOC_DIR = "%s"' % self.RPM_DOC_DIR
            print self.args

        if not os.path.exists('composer.json'):
            print >> sys.stderr, 'ERROR: Composer install: composer.json not found'
            sys.exit(1)

        self.metadata         = json.load(open('composer.json'))

        self.vendorDir        = self.DEFAULT_VENDOR_DIR

        self.composerDir          = None
        self.buildrootComposerDir = None

        self.installDir       = None
        self.installVendorDir = None

        self.binDir           = None
        self.installBinDir    = None
        self.sysBinDir        = None
        self.installSysBinDir = None

        self._install()


    def parseArgs(self):
        parser = argparse.ArgumentParser(description='Installs a package from a composer.json file from the current working directory.',
                                         epilog="""required environment variables:
  RPM_PACKAGE_NAME      RPM spec %{name} (usually set by rpmbuild)
  RPM_PACKAGE_VERSION   RPM spec %{version} (usually set by rpmbuild)
  RPM_BUILD_ROOT        RPM spec %{buildroot} (usually set by rpmbuild)
  RPM_DOC_DIR           RPM spec %{_docdir} (usually set by rpmbuild)
""", formatter_class=argparse.RawTextHelpFormatter)

        parser.add_argument('-v', '--verbose',
                            action='store_true',
                            dest='verbose',
                            help='verbose output',
                            default=False)

        parser.add_argument('--vendor-dir',
                            dest='vendor_dir',
                            help='composer package vendor directory (default: composer.json {"config": {"vendor-dir": ""}} || "' + self.DEFAULT_VENDOR_DIR + '")')

        parser.add_argument('--bin-dir',
                            dest='bin_dir',
                            help='composer package bin directory (default: composer.json {"config": {"bin-dir": ""}} || "' + self.DEFAULT_BIN_DIR + '")')

        parser.add_argument('--sys-bin-dir',
                            dest='sys_bin_dir',
                            help='system bin directory (default: "' + self.DEFAULT_SYS_BIN_DIR + '")')

        parser.add_argument('--composer',
                            help='composer executable')

        parser.add_argument('--composer-dir',
                            dest='composer_dir',
                            help='composer directory (default: "' + self.DEFAULT_COMPOSER_DIR + '")')

        parser.add_argument('--php-dir',
                            dest='php_dir',
                            help='PHP directory')

        parser.add_argument('--no-bin',
                            action='store_true',
                            dest='no_bin',
                            help='do not install any bin symlinks (pkg nor sys)',
                            default=False)

        return parser.parse_args()


    def _install(self):
        if not 'name' in self.metadata:
            print >> sys.stderr, 'ERROR: Composer install: "name" not defined in composer.json'
            sys.exit(1)

        self._installComposerDir()
        self._installDirs()

        # vendor symlinks
        self._installVendorSymlinks('require')
        self._installVendorSymlinks('require-dev')
        self._installVendorSymlinks('suggest')

        # Set config to use global PHP include path
        subprocess.check_call(self.args.composer + ' --no-ansi config use-include-path true', shell=True)
        # Create auto-load files
        subprocess.check_call(self.args.composer + ' --no-ansi dump-autoload', shell=True)

        subprocess.check_call('cp -pr * ' + self.installDir, shell=True)

        self._installBin()


    def _installComposerDir(self):
        #
        # composerDir
        #

        self.composerDir = self.DEFAULT_COMPOSER_DIR

        if self.args.composer_dir:
            self.composerDir = self.args.composer_dir

        if self.args.verbose:
            print 'composer-install: _installComposerDir: composerDir = "%s"' % self.composerDir

        #
        # buildrootComposerDir
        #

        self.buildrootComposerDir = self.RPM_BUILD_ROOT + self.composerDir

        if self.args.verbose:
            print 'composer-install: _installComposerDir: buildrootComposerDir = "%s"' % self.buildrootComposerDir

        os.makedirs(self.buildrootComposerDir, 0755)


    def _installDirs(self):
        self.installDir = self.buildrootComposerDir + \
                          os.sep + self.metadata['name']

        if self.args.verbose:
            print 'composer-install: _installDirs: installDir = "%s"' % self.installDir

        if self.args.vendor_dir:
            self.vendorDir = self.args.vendor_dir
        elif 'config' in self.metadata and 'vendor-dir' in self.metadata['config'] and self.metadata['config']['vendor-dir']:
            self.vendorDir = self.metadata['config']['vendor-dir']
        if self.args.verbose:
            print 'composer-install: _installDirs: vendorDir = "%s"' % self.vendorDir

        self.installVendorDir = self.installDir + os.sep + self.vendorDir
        if self.args.verbose:
            print 'composer-install: _installDirs: installVendorDir = "%s"' % self.installVendorDir

        subprocess.check_call('mkdir -p -m 0755 ' + self.installVendorDir, shell=True)


    def _installVendorSymlinks(self, package_type):
        if self.args.verbose:
            print 'composer-install: install_vendor_symlinks: package_type = "%s"' % package_type

        if not package_type in self.metadata:
            return

        for package in self.metadata[package_type]:
            if self.args.verbose:
                print 'composer-install: install_vendor_symlinks:     package = "%s"' % package

            # Skip packages like "php" and "ext-*"
            if not '/' in package:
                continue

            vendor, project = package.split('/')

            if self.args.verbose:
                print 'composer-install: install_vendor_symlinks:         package vendor = "%s"' % vendor
                print 'composer-install: install_vendor_symlinks:         package project = "%s"' % project

            # Package vendor directory
            vendor_dir = os.path.join(self.vendorDir, vendor)
            if self.args.verbose:
                print 'composer-install: install_vendor_symlinks:         package vendor dir = "%s"' % vendor_dir
            if not os.path.exists(vendor_dir):
                os.makedirs(vendor_dir, 0755)

            # Package project directory
            project_dir      = os.path.join(vendor_dir, project)
            project_dir_real = os.path.join(self.args.composer_dir, vendor, project)
            if self.args.verbose:
                print 'composer-install: install_vendor_symlinks:         package project dir = "%s"' % project_dir
                print 'composer-install: install_vendor_symlinks:         package project dir real = "%s"' % project_dir_real
            if not os.path.islink(project_dir):
                os.symlink(project_dir_real, project_dir)


    def _installBin(self):
        if not 'bin' in self.metadata or self.args.no_bin:
            return

        self._installBinDirs()

        packageDir = os.path.join(self.args.composer_dir, self.metadata['name'])
        if self.args.verbose:
            print 'composer-install: _installBin: packageDir = "%s"' % packageDir

        for bin in self.metadata['bin']:
            binSrc        = os.path.join(packageDir, bin)
            binPkgSymlink = os.path.join(self.installBinDir, os.path.basename(bin))
            binSysSymlink = os.path.join(self.installSysBinDir, os.path.basename(bin))

            if self.args.verbose:
                print 'composer-install: _installBin: bin = "%s"' % bin
                print 'composer-install: _installBin:     src = "%s"' % binSrc
                print 'composer-install: _installBin:     pkg symlink = "%s"' % binPkgSymlink
                print 'composer-install: _installBin:     sys symlink = "%s"' % binSysSymlink

            os.symlink(binSrc, binPkgSymlink)
            os.symlink(binSrc, binSysSymlink)


    def _installBinDirs(self):
        #
        # binDir
        #

        self.binDir = self.DEFAULT_BIN_DIR

        if self.args.bin_dir:
            self.binDir = self.args.bin_dir
        elif 'config' in self.metadata and 'bin-dir' in self.metadata['config'] and self.metadata['config']['bin-dir']:
            self.binDir = self.metadata['config']['bin-dir']

        if self.args.verbose:
            print 'composer-install: _installBin: binDir = "%s"' % self.binDir

        #
        # installBinDir
        #

        self.installBinDir = self.installDir + os.sep + self.binDir

        if self.args.verbose:
            print 'composer-install: _installBin: installBinDir = "%s"' % self.installBinDir

        if not os.path.exists(self.installBinDir):
            os.makedirs(self.installBinDir, 0755)

        #
        # sysBinDir
        #

        self.sysBinDir = self.DEFAULT_SYS_BIN_DIR

        if self.args.sys_bin_dir:
            self.sysBinDir = self.args.sys_bin_dir

        if self.args.verbose:
            print 'composer-install: _installBin: sysBinDir = "%s"' % self.sysBinDir

        #
        # installSysBinDir
        #

        self.installSysBinDir = self.RPM_BUILD_ROOT + self.sysBinDir

        if self.args.verbose:
            print 'composer-install: _installBin: installSysBinDir = "%s"' % self.installSysBinDir

        if not os.path.exists(self.installSysBinDir):
            os.makedirs(self.installSysBinDir, 0755)



if __name__ == '__main__':
    ComposerInstall()
