#!/usr/bin/python

"""
Installs a package from a composer.json file from the current working directory.
"""

# Copyright 2013 Shawn Iwinski <shawn.iwinski@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

import json
import os
import sys
import argparse
import subprocess

RPM_PACKAGE_NAME    = os.environ.get('RPM_PACKAGE_NAME')
RPM_PACKAGE_VERSION = os.environ.get('RPM_PACKAGE_VERSION')
RPM_BUILD_ROOT      = os.environ.get('RPM_BUILD_ROOT')
RPM_DOC_DIR         = os.environ.get('RPM_DOC_DIR')


def parse_args():
    parser = argparse.ArgumentParser(description='Installs a package from a composer.json file from the current working directory.',
                                     epilog="""required environment variables:
  RPM_PACKAGE_NAME      RPM spec %{name} (usually set by rpmbuild)
  RPM_PACKAGE_VERSION   RPM spec %{version} (usually set by rpmbuild)
  RPM_BUILD_ROOT        RPM spec %{buildroot} (usually set by rpmbuild)
  RPM_DOC_DIR           RPM spec %{_docdir} (usually set by rpmbuild)
""", formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-v', '--verbose', '-d', '--debug',
                        action='store_true',
                        dest='verbose',
                        help='verbose/debug output',
                        default=False)
    parser.add_argument('--composer',
                        help='composer executable')
    parser.add_argument('--composer_dir',
                        help='composer directory')
    parser.add_argument('--php_dir',
                        help='PHP directory')
    parser.add_argument('--bin_dir',
                        help='bin directory')

    return parser.parse_args()


def install_autoload(metadata, args):
    if not 'autoload' in metadata:
        return

    pass


def install_bin(metadata, args):
    pass


def install_doc(metadata, args):
    pass


def install(metadata, args):
    if not 'name' in metadata:
        print >> sys.stderr, 'ERROR: Composer install: "name" not defined in composer.json'
        sys.exit(1)

    dst_dir = RPM_BUILD_ROOT + args.composer_dir + os.sep + metadata['name']
    subprocess.check_call('mkdir -p -m 0755 ' + dst_dir, shell=True)
    subprocess.check_call('cp -pr * ' + dst_dir, shell=True)

    install_autoload(metadata, args)
    install_bin(metadata, args)
    install_doc(metadata, args)


def main():
    args = parse_args()

    if args.verbose:
        print 'RPM_PACKAGE_NAME = "%s"' % RPM_PACKAGE_NAME
        print 'RPM_PACKAGE_VERSION = "%s"' % RPM_PACKAGE_VERSION
        print 'RPM_BUILD_ROOT = "%s"' % RPM_BUILD_ROOT
        print 'RPM_DOC_DIR = "%s"' % RPM_DOC_DIR
        print args

    if not os.path.exists('composer.json'):
        print >> sys.stderr, 'ERROR: Composer install: composer.json not found'
        sys.exit(1)

    metadata = json.load(open('composer.json'))

    install(metadata, args)


if __name__ == '__main__':
    main()
